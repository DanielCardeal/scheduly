from typing import Protocol, Sequence

from attrs import frozen
from clingo import Model, Symbol, SymbolType
from typing_extensions import Self

from ime_usp_class_scheduler.model.common import Period, Weekday


class AspOutput(Protocol):
    """Objects that can be parsed from an ASP symbol."""

    @classmethod
    def from_asp(cls, symbol: Symbol) -> Self:
        ...


@frozen
class JointedData:
    """Information about jointed courses in an ASP model."""

    course_id_a: str
    course_id_b: str

    @classmethod
    def from_asp(cls, symbol: Symbol) -> Self:
        assert symbol.type is SymbolType.Function and symbol.name in (
            "joint",
            "_joint",
        ), f"Unable to construct JointedData object from the given symbol: {str(symbol)}"
        course_id_a = symbol.arguments[0].string
        course_id_b = symbol.arguments[1].string
        return cls(course_id_a, course_id_b)


@frozen
class ClassData:
    """Information about a scheduled class in a ASP model."""

    course_id: str
    group: str
    weekday: Weekday
    period: Period

    @classmethod
    def from_asp(cls, symbol: Symbol) -> Self:
        assert (
            symbol.type is SymbolType.Function and symbol.name == "class"
        ), f"Unable to construct ClassData object from the given symbol: {str(symbol)}"
        course_id = symbol.arguments[0].string
        group = symbol.arguments[1].string
        weekday = Weekday(symbol.arguments[2].number)
        period = Period(symbol.arguments[3].number)
        return cls(course_id, group, weekday, period)


@frozen
class ConflictData:
    """Information about conflicting classes in a ASP model."""

    course_id_a: str
    group_id_a: str
    course_id_b: str
    group_id_b: str
    weekday: Weekday
    period: Period

    @classmethod
    def from_asp(cls, symbol: Symbol) -> Self:
        assert (
            symbol.type is SymbolType.Function and symbol.name == "conflict"
        ), f"Unable to construct ConflictData object from the given symbol: {str(symbol)}"
        course_id_a = symbol.arguments[0].string
        group_id_a = symbol.arguments[1].string
        course_id_b = symbol.arguments[2].string
        group_id_b = symbol.arguments[3].string
        weekday = Weekday(symbol.arguments[4].number)
        period = Period(symbol.arguments[5].number)
        return cls(course_id_a, group_id_a, course_id_b, group_id_b, weekday, period)


@frozen
class ModelResult:
    """Information about a model generated by the scheduler.

    Use this class instead of saving plain clingo.Models, since they are not
    safe to use outside the SolveHandle scope. Further information:
    https://github.com/potassco/clingo/issues/305
    """

    symbols: Sequence[Symbol]
    cost: list[int]

    @classmethod
    def from_model(cls, model: Model) -> Self:
        symbols = model.symbols(shown=True)
        cost = model.cost
        return cls(symbols, cost)
